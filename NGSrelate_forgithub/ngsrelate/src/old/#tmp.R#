
#not for ML and low epsilon but otherwise correct pars highr higher or equal llh
k0real=(table(dat$truepaths)/(dim(dat$truepaths)[2]*nchr))[1]
k1real=(table(dat$truepaths)/(dim(dat$truepaths)[2]*nchr))[2]
k2real=1-k0real-k1real

relateHMM(geno_likebased-1,pair=c(1,2),pos=pos/1e6,chr=chr,alim=c(0.001,alim2),opti=opti,epsilon=0.01,calc.a=F,af=af,par=c(a,k2real,k1real,k0real)) 
ri2
ri20.15k2is0eps0.01

relateHMM(geno_likebased-1,pair=c(1,2),pos=pos/1e6,chr=chr,alim=c(0.001,alim2),opti=opti,epsilon=0.05,calc.a=F,af=af,par=c(a,0,1,0)) 
ri20.15k2is0eps0.05

relateHMM(geno_likebased-1,pair=c(1,2),pos=pos/1e6,chr=chr,alim=c(0.001,alim2),opti=opti,epsilon=0.1,calc.a=F,af=af,par=c(a,0,1,0)) 
ri20.15k2is0eps0.10

relateHMM(geno_likebased-1,pair=c(1,2),pos=pos/1e6,chr=chr,alim=c(0.001,alim2),opti=opti,epsilon=0.15,calc.a=F,af=af,par=c(a,0,1,0)) 
ri20.15k2is0eps0.15

ngsrelateHMM(rbind(like1,like2),pair=c(1,2),pos=pos/1e6,chr=chr,alim=c(0.001,alim2),opti=opti,epsilon=0.01,calc.a=F,af=af,par=c(a,0,1,0))
ri2x
ri2x0.15k2is0

par(mfrow=3:1)
plot(ri2)
plot(ri2x)





for(t in c(ri2)){
for(postthres in c(0.5,0.75,0.9,0.95,0.99)){
  print(paste("Proportion of genome where post of sharing 1 allele is >", postthres," is ",mean(t$decode$post[,2]>postthres,na.rm=T), sep=""))
}
print(paste("Proportion of genome where viterbi path has state 1 is ",mean(t$decode$path==1,na.rm=T),sep=""))
print(paste("ML k1 is",t$k[2]))
print(paste("Proportion of genome where 1 allele is shared ibd is",k1real))  


s = nsnp*nchr



  
cor = sum(dat$truepath==apply(t$decode$post ,2,function(x){if(max(x)>postthres){3-which.max(x)}else{NA}}),na.rm=T)/s

cor2 = sum(unlist(lapply(r,function(x){x$state}))==apply(t2$decode$post,2,function(x){if(max(x)>postthres){3-which.max(x)}else{NA}}),na.rm=T)/s


## - fraction of incorrectly inferred sites (using post>0.95) -- 0 is best
incor = sum(unlist(lapply(r,function(x){x$state}))!=apply(t$decode$post ,2,function(x){if(max(x)>postthres){3-which.max(x)}else{NA}}),na.rm=T)/s

incor2 = sum(unlist(lapply(r,function(x){x$state}))!=apply(t2$decode$post,2,function(x){if(max(x)>postthres){3-which.max(x)}else{NA}}),na.rm=T)/s

## - fraction of NAs (using post>0.95) -- 0 is best
nas = sum(is.na(apply(t$decode$post ,2,function(x){if(max(x)>postthres){3-which.max(x)}else{NA}})))/s

nas2 = sum(is.na(apply(t2$decode$post,2,function(x){if(max(x)>postthres){3-which.max(x)}else{NA}})))/s

print("")
print(paste("Postthres",postthres))
print(c(cor,incor,nas))
print(c(cor2,incor2,nas2))
}

## Using viterbi
cor = sum(unlist(lapply(r,function(x){x$state}))==t$decode$path)/s
cor2 = sum(unlist(lapply(r,function(x){x$state}))==t2$decode$path)/s

incor = sum(unlist(lapply(r,function(x){x$state}))!=t$decode$path)/s
incor2 = sum(unlist(lapply(r,function(x){x$state}))!=t2$decode$path)/s

print("")
print("Viterbi")
print(c(cor,incor,0))
print(c(cor2,incor2,0))

}
simData<-function(nind,nsnp,nchr,k0,k1,a=NULL,min=0.025,max=0.975,nsnpprcm){
  # find pars
  k2=1-k0-k1
  if(is.null(a))
    a=calculate.a(k0,k1,k2,phi=0.013)

  # sim freqs
  freq<-runif(nsnp,min=min,max=max) #the population allele frequency of the SNPs (assumed to be uniform for SNP chip data)

  # sim genos for nind inds (to make nsnp genos in each each of nchr chromosomes for each ind))
  data<-matrix(rbinom(nind*nsnp*nchr,2,rep(freq,nind*nchr)),ncol=nsnp*nchr,byrow=T)+1 
  
  # sim genos for related inds (also nchr chr with nsnp snps in each)
  r<-replicate(nchr,sim_chr(nsnp,freq=freq, min=0.5, max=0.95, k=c(k0,k1,k2), a=a, number_per_cm=nsnpprcm ),simplify = F)
  states<-t(unlist(sapply(r,function(x) x$state)))
  pos<-as.vector(unlist(sapply(r,function(x) x$pos)))
  chr=rep(1:nchr,each=nsnp)
  geno<-unlist(sapply(r,function(x) x$geno))

  # combine data (two first inds related)
  combigeno<-rbind(rbind(as.vector(geno[1:nsnp,]),as.vector(geno[1:nsnp+nsnp,]))+1,data)

  # return all sim data
  list(geno=combigeno,pos=pos,chr=chr,truepaths=states,truefreq=rep(freq,nchr))
}




simData_new<-function(nind,nsnp,nchr,k0,k1,nsnpprcm=20){
  # find pars
  k2=1-k0-k1
  a=calculate.a(k0,k1,k2,phi=0.013)

  # sim freqs
  freq<-runif(nsnp,min=0.025,max=0.975) #the population allele frequency of the SNPs (assumed to be uniform for SNP chip data)

  # sim genos for nind inds (to make nsnp genos in each each of nchr chromosomes for each ind))
  data<-matrix(rbinom(nind*nsnp*nchr,2,rep(freq,nind*nchr)),ncol=nsnp*nchr,byrow=T)+1 
  
  # sim genos for related inds (also nchr chr with nsnp snps in each)
  r<-replicate(nchr,sim_chr(nsnp,freq=freq, min=0.5, max=0.975, k=c(k0,k1,k2), a=a, number_per_cm=nsnpprcm ),simplify = F)
  states<-t(unlist(sapply(r,function(x) x$state)))
  pos<-as.vector(unlist(sapply(r,function(x) x$pos)))
  chr=rep(1:nchr,each=nsnp)
  geno<-unlist(sapply(r,function(x) x$geno))

  # combine data (two first inds related)
  combigeno<-rbind(rbind(as.vector(geno[1:nsnp,]),as.vector(geno[1:nsnp+nsnp,]))+1,data)

  # return all sim data
  list(geno=combigeno,pos=pos,chr=chr,truepaths=states,truefreq=rep(freq,nchr),a=a)
}

